
In [58]:

# OBSERVATIONS 
# 1. There is positive correlation between Average Mouse Weight & Average Tumor Volume for Capomulin. 
# 2. Only the Infubinol Regimen had an outlier as shown by the orange dot in the boxplot. 
# 3. Ketapril had the highest average tumor volume at 55.24. This means that may had been the most ineffective regimen.

In [59]:

# Dependencies and Setup
import matplotlib.pyplot as plt
import pandas as pd
import scipy.stats as st
import os
import numpy as np

# Study data files
mouse_metadata_path = os.path.join("..", "data", "Mouse_metadata.csv")
study_results_path = os.path.join("..", "data", "Study_results.csv")

# Read the mouse data and the study results
mouse_metadata = pd.read_csv(mouse_metadata_path)
study_results = pd.read_csv(study_results_path)

In [60]:

# Combine the data into a single dataset
mouse_metadata.head()
merge_table = pd.merge(mouse_metadata, study_results, on="Mouse ID", how="left")
merge_table

Out[60]:
	Mouse ID 	Drug Regimen 	Sex 	Age_months 	Weight (g) 	Timepoint 	Tumor Volume (mm3) 	Metastatic Sites
0 	k403 	Ramicane 	Male 	21 	16 	0 	45.000000 	0
1 	k403 	Ramicane 	Male 	21 	16 	5 	38.825898 	0
2 	k403 	Ramicane 	Male 	21 	16 	10 	35.014271 	1
3 	k403 	Ramicane 	Male 	21 	16 	15 	34.223992 	1
4 	k403 	Ramicane 	Male 	21 	16 	20 	32.997729 	1
... 	... 	... 	... 	... 	... 	... 	... 	...
1888 	z969 	Naftisol 	Male 	9 	30 	25 	63.145652 	2
1889 	z969 	Naftisol 	Male 	9 	30 	30 	65.841013 	3
1890 	z969 	Naftisol 	Male 	9 	30 	35 	69.176246 	4
1891 	z969 	Naftisol 	Male 	9 	30 	40 	70.314904 	4
1892 	z969 	Naftisol 	Male 	9 	30 	45 	73.867845 	4

1893 rows × 8 columns
In [61]:

# Checking the number of mice
number_of_mice = len(merge_table["Mouse ID"].unique())
number_of_mice

Out[61]:

249

In [62]:

# Getting the duplicate mice by ID number that shows up for Mouse ID and Timepoint
merge_table[merge_table.duplicated(['Mouse ID', 'Timepoint'])]

Out[62]:
	Mouse ID 	Drug Regimen 	Sex 	Age_months 	Weight (g) 	Timepoint 	Tumor Volume (mm3) 	Metastatic Sites
909 	g989 	Propriva 	Female 	21 	26 	0 	45.000000 	0
911 	g989 	Propriva 	Female 	21 	26 	5 	47.570392 	0
913 	g989 	Propriva 	Female 	21 	26 	10 	49.880528 	0
915 	g989 	Propriva 	Female 	21 	26 	15 	53.442020 	0
917 	g989 	Propriva 	Female 	21 	26 	20 	54.657650 	1
In [63]:

# Create a clean DataFrame by dropping the duplicate mouse by its ID
clean_table = merge_table.loc[merge_table['Mouse ID']!='g989']
clean_table

Out[63]:
	Mouse ID 	Drug Regimen 	Sex 	Age_months 	Weight (g) 	Timepoint 	Tumor Volume (mm3) 	Metastatic Sites
0 	k403 	Ramicane 	Male 	21 	16 	0 	45.000000 	0
1 	k403 	Ramicane 	Male 	21 	16 	5 	38.825898 	0
2 	k403 	Ramicane 	Male 	21 	16 	10 	35.014271 	1
3 	k403 	Ramicane 	Male 	21 	16 	15 	34.223992 	1
4 	k403 	Ramicane 	Male 	21 	16 	20 	32.997729 	1
... 	... 	... 	... 	... 	... 	... 	... 	...
1888 	z969 	Naftisol 	Male 	9 	30 	25 	63.145652 	2
1889 	z969 	Naftisol 	Male 	9 	30 	30 	65.841013 	3
1890 	z969 	Naftisol 	Male 	9 	30 	35 	69.176246 	4
1891 	z969 	Naftisol 	Male 	9 	30 	40 	70.314904 	4
1892 	z969 	Naftisol 	Male 	9 	30 	45 	73.867845 	4

1880 rows × 8 columns
In [64]:

# Checking the number of mice in the clean DataFrame
clean_mice = len(clean_table["Mouse ID"].unique())
clean_mice

Out[64]:

248

In [65]:

# Summary Statistics 

# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the tumor volume for each regimen
mean = clean_table.groupby(["Drug Regimen"]).mean()["Tumor Volume (mm3)"]
median = clean_table.groupby(["Drug Regimen"]).median()["Tumor Volume (mm3)"]
variance = clean_table.groupby(["Drug Regimen"]).var()["Tumor Volume (mm3)"]
STD = clean_table.groupby(["Drug Regimen"]).std()["Tumor Volume (mm3)"]
SEM = clean_table.groupby(["Drug Regimen"]).sem()["Tumor Volume (mm3)"]

summary_stat = pd.DataFrame({"Mean":mean, "Median":median, "Variance":variance, "Standard Deviation":STD, "SEM":SEM})
summary_stat = summary_stat.round(2)
summary_stat

Out[65]:
	Mean 	Median 	Variance 	Standard Deviation 	SEM
Drug Regimen 					
Capomulin 	40.68 	41.56 	24.95 	4.99 	0.33
Ceftamin 	52.59 	51.78 	39.29 	6.27 	0.47
Infubinol 	52.88 	51.82 	43.13 	6.57 	0.49
Ketapril 	55.24 	53.70 	68.55 	8.28 	0.60
Naftisol 	54.33 	52.51 	66.17 	8.13 	0.60
Placebo 	54.03 	52.29 	61.17 	7.82 	0.58
Propriva 	52.32 	50.45 	43.85 	6.62 	0.54
Ramicane 	40.22 	40.67 	23.49 	4.85 	0.32
Stelasyn 	54.23 	52.43 	59.45 	7.71 	0.57
Zoniferol 	53.24 	51.82 	48.53 	6.97 	0.52
In [66]:

# Bar & Pie Plots 

# Generate a bar plot showing the total number of mice for each treatment throughout the course of the study using pandas
drug_regimen = clean_table["Drug Regimen"].value_counts()
x_axis = drug_regimen.index
y_axis = drug_regimen.values

drug_regimen.plot(kind="bar", color="green", title = "Total Counts for each Regimen")

Out[66]:

<matplotlib.axes._subplots.AxesSubplot at 0x23f987fe948>

In [67]:

# Generate a bar plot showing the total number of mice for each treatment throughout the course of the study using pyplot
y_axis = drug_regimen.values
x_axis = drug_regimen.index

plt.bar(x_axis, y_axis, color="g", alpha=0.5, align= "center")
plt.xlabel("Treatment Regimens")
plt.ylabel("Trials")
plt.title("Total Counts for each Regimen")
plt.xticks(rotation=90)
plt.show()

In [68]:

# Generate a pie plot showing the distribution of female versus male mice using pandas
gender_count = clean_table["Sex"].value_counts()
explode = (0,0.1)
colors = ("red","blue")
gender_count.plot(kind="pie", shadow=True, autopct="%1.2f%%", explode=explode, colors=colors, title = "Gender Percentage Counts")

Out[68]:

<matplotlib.axes._subplots.AxesSubplot at 0x23f98570f08>

In [69]:

# Generate a pie plot showing the distribution of female versus male mice using pyplot
plt.pie(gender_count, shadow=True, autopct="%1.2f%%", explode=explode, colors=colors, labels=("Male", "Female"))
plt.title("Gender Percentage Counts")

Out[69]:

Text(0.5, 1.0, 'Gender Percentage Counts')

In [70]:

# Quartiles, Outliers, & Boxplots

# Calculate the final tumor volume of each mouse across four of the treatment regimens:  
# Capomulin, Ramicane, Infubinol, and Ceftamin
regimen_list = ("Capomulin", "Ramicane", "Infubinol", "Ceftamin")
regimen_final = clean_table.loc[clean_table["Drug Regimen"].isin(regimen_list)]

# Start by getting the last (greatest) timepoint for each mouse
tumor_volume = regimen_final.groupby(regimen_final["Mouse ID"]).agg({"Timepoint":["max"]})
tumor_volume.columns = ["Timepoint"]

# Merge this group df with the original dataframe to get the tumor volume at the last timepoint
tumor_volume = tumor_volume.reset_index()
tumor_volume_final = pd.merge(tumor_volume, clean_table, how="left", on=["Mouse ID", "Timepoint"])
tumor_volume_final
tumor_volume_final.round(2)

Out[70]:
	Mouse ID 	Timepoint 	Drug Regimen 	Sex 	Age_months 	Weight (g) 	Tumor Volume (mm3) 	Metastatic Sites
0 	a203 	45 	Infubinol 	Female 	20 	23 	67.97 	2
1 	a251 	45 	Infubinol 	Female 	21 	25 	65.53 	1
2 	a275 	45 	Ceftamin 	Female 	20 	28 	63.00 	3
3 	a411 	45 	Ramicane 	Male 	3 	22 	38.41 	1
4 	a444 	45 	Ramicane 	Female 	10 	25 	43.05 	0
... 	... 	... 	... 	... 	... 	... 	... 	...
95 	y769 	45 	Ceftamin 	Female 	6 	27 	68.59 	4
96 	y793 	45 	Capomulin 	Male 	17 	17 	31.90 	2
97 	y865 	45 	Ceftamin 	Male 	23 	26 	64.73 	3
98 	z578 	45 	Ramicane 	Male 	11 	16 	30.64 	0
99 	z581 	45 	Infubinol 	Female 	24 	25 	62.75 	3

100 rows × 8 columns
In [71]:

# Put treatments into a list for for loop (and later for plot labels)
regimen_list = ["Capomulin", "Ramicane", "Infubinol", "Ceftamin"]

# Create empty list to fill with tumor vol data (for plotting)
tumor_volumes = []

# Calculate the IQR and quantitatively determine if there are any potential outliers. 
    #Locate the rows which contain mice on each drug and get the tumor volumes
for drug in regimen_list:
            tumor_regimen_volume = tumor_volume_final["Tumor Volume (mm3)"].loc[tumor_volume_final["Drug Regimen"]== drug]
    
    # Add Subset 
            tumor_volumes.append(tumor_regimen_volume)
    
    # Determine outliers using upper and lower bounds
            quartiles = tumor_regimen_volume.quantile([.25,.5,.75])
            lower_quartile = quartiles[0.25]
            upper_quartile = quartiles[0.75]
            IQR = upper_quartile - lower_quartile
            print(f'For {drug}, Interquartile Range (IQR) is {round(IQR,2)}')
            lower_bound = lower_quartile - (1.5 * IQR)
            upper_bound = upper_quartile + (1.5 * IQR)
            print(f"For {drug}, values below {round(lower_bound,2)} could be outliers")
            print(f"For {drug}, values above {round(upper_bound,2)} could be outliers\n")

For Capomulin, Interquartile Range (IQR) is 7.78
For Capomulin, values below 20.7 could be outliers
For Capomulin, values above 51.83 could be outliers

For Ramicane, Interquartile Range (IQR) is 9.1
For Ramicane, values below 17.91 could be outliers
For Ramicane, values above 54.31 could be outliers

For Infubinol, Interquartile Range (IQR) is 11.48
For Infubinol, values below 36.83 could be outliers
For Infubinol, values above 82.74 could be outliers

For Ceftamin, Interquartile Range (IQR) is 15.58
For Ceftamin, values below 25.36 could be outliers
For Ceftamin, values above 87.67 could be outliers

In [72]:

# Generate a box plot of the final tumor volume of each mouse across four regimens of interest
orange_dot = dict(markerfacecolor='orange', markersize=12)

fig, ax = plt.subplots()
ax.set_title("Final Tumor Volumes Across Regimens")
ax.set_xticklabels(regimen_list)
ax.set_ylabel("Tumor Volume (mm3)")
ax.boxplot(tumor_volumes, flierprops=orange_dot)
plt.show()

In [73]:

# Line & Scatter Plots 
# Generate a line plot of time point versus tumor volume for a mouse treated with Capomulin
capomulin_mice = clean_table[["Timepoint","Tumor Volume (mm3)"]].loc[(clean_table["Drug Regimen"]=="Capomulin")&(clean_table["Mouse ID"]=="s185")]

plt.plot(capomulin_mice["Timepoint"],capomulin_mice["Tumor Volume (mm3)"], marker='o')
plt.title("Mice Treated with Capomulin Regimen")
plt.xlabel("Timepoint")
plt.ylabel("Tumor Volume (mm3)")

Out[73]:

Text(0, 0.5, 'Tumor Volume (mm3)')

In [74]:

# Generate a scatter plot of mouse weight versus average tumor volume for the Capomulin regimen
capomulin_average = clean_table.loc[clean_table["Drug Regimen"]=="Capomulin"].groupby(clean_table["Timepoint"]).agg({"Tumor Volume (mm3)":["mean"], "Weight (g)":["mean"]})
capomulin_average.columns= ["Average Tumor Volume {mm3}","Average Mouse Weight (g)"]

AMW = capomulin_average["Average Mouse Weight (g)"]
ATV = capomulin_average["Average Tumor Volume {mm3}"]
plt.scatter(AMW,ATV)
plt.title("Average Tumor Volume vs. Average Mouse Weight")
plt.xlabel("Mouse Weight")
plt.ylabel("Tumor Volume (mm3)")

Out[74]:

Text(0, 0.5, 'Tumor Volume (mm3)')

In [75]:

# Calculate the correlation coefficient and linear regression model 
# for mouse weight and average tumor volume for the Capomulin regimen
correlation = st.pearsonr(AMW,ATV)
print(f'Correlation between Average Tumor Volume and Mouse Weight for the Capomulin Regimen is {round(correlation[0],2)}')

(slope, intercept, rvalue, pvalue, stderr) = st.linregress(AMW,ATV)
equation = "y = " + str(round(slope,2)) + "x + " + str(round(intercept,2))
print(f'Linear Regression Equation for the Capomulin Regimen is {equation}')

plt.scatter(AMW,ATV)
plt.title("Weight vs. Tumor for the Capomulin Regimen")
plt.xlabel("Mice Weight")
plt.ylabel("Tumor Volume (mm3)")

regress_values = AMW * slope + intercept
plt.plot(AMW, regress_values, "r-")
plt.annotate(equation,(19.95,39),fontsize=14,color="green")
plt.show()

Correlation between Average Tumor Volume and Mouse Weight for the Capomulin Regimen is 0.82
Linear Regression Equation for the Capomulin Regimen is y = 20.29x + -364.52
